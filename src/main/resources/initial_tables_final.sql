CREATE TABLE ADDRESS (
    ADDRESS_ID NUMBER NOT NULL,
    ADDRESS_NUMBER NUMBER,
    ADDRESS_STREET VARCHAR2(255),
    ADDRESS_CITY VARCHAR2(255),
    ADDRESS_REGION VARCHAR2(255),
    ADDRESS_ZIPCODE VARCHAR2(10),
    CONSTRAINT PK_ADDRESS_ID PRIMARY KEY (ADDRESS_ID)
);
CREATE TABLE ACCESSTABLE (
    ACCESS_ID NUMBER NOT NULL,
    ACCESS_CANENROLLPATIENT CHAR(1),
    ACCESS_CANEDITPATIENTINFO CHAR(1),
    ACCESS_CANVIEWPATIENTINFO CHAR(1),
    ACCESS_CANDELETEUSER CHAR(1),
    ACCESS_CANDELETEPATIENTINFO CHAR(1),
    CONSTRAINT PK_ACCESS_ID PRIMARY KEY (ACCESS_ID)
);

CREATE TABLE ROLE (
    ROLE_ID NUMBER NOT NULL,
    ROLE_NAME VARCHAR2(255),
    ROLE_DESCRIPTION VARCHAR2(1000),
    CONSTRAINT PK_ROLE_ID PRIMARY KEY (ROLE_ID)
);


CREATE TABLE HOSPITAL (
    HOSPITAL_ID NUMBER NOT NULL,
    HOSPITAL_NAME VARCHAR2(255),
    HOSPITAL_ADDRESS NUMBER,
    HOSPITAL_CONTACT_NO VARCHAR2(15),
    CONSTRAINT PK_HOSPITAL_ID PRIMARY KEY (HOSPITAL_ID),
    CONSTRAINT FK_ADDRESS_HOSPITAL FOREIGN KEY (HOSPITAL_ADDRESS) REFERENCES Address(ADDRESS_ID)
);

CREATE TABLE DEPARTMENT (
    DEPARTMENT_ID NUMBER NOT NULL,
    DEPARTMENT_NAME VARCHAR2(255),
    CONSTRAINT PK_DEPARTMENT_ID PRIMARY KEY (DEPARTMENT_ID)
);

CREATE TABLE SPECIALTY (
    SPECIALTY_ID NUMBER NOT NULL,
    SPECIALTY_NAME VARCHAR2(255),
    SPECIALTY_DESCRIPTION VARCHAR2(1000),
    CONSTRAINT PK_SPECIALTY_ID PRIMARY KEY (SPECIALTY_ID)
);

CREATE TABLE USERTABLE (
    USER_ID NUMBER NOT NULL,
    USER_LASTNAME VARCHAR2(255) NOT NULL,
    USER_FIRSTNAME VARCHAR2(255) NOT NULL,
    USER_MIDDLENAME VARCHAR2(255),
    USER_EMAIL VARCHAR2(255) NOT NULL UNIQUE,
    USER_PASSWORD VARCHAR2(255) NOT NULL,
    USER_GENDER VARCHAR2(50) NOT NULL,
    USER_MARITAL_STATUS VARCHAR2(50) NOT NULL,
    USER_BIRTHDATE DATE NOT NULL,
    USER_BIRTHPLACE VARCHAR2(255) NOT NULL,
    USER_ADDRESS NUMBER, -- Foreign key to Address table
    USER_CONTACTNO NUMBER,
    USER_ROLE NUMBER, -- Foreign key to a Role table
    USER_ACCESS NUMBER , -- Foreign key to an Access table
    USER_IS_VERIFIED CHAR(1),
    USER_STATUS VARCHAR2(50),
    USER_CREATED_ON TIMESTAMP,
    USER_UPDATED_ON TIMESTAMP,
    USER_ENCODER NUMBER, -- Foreign key to another User or another table
    CONSTRAINT PK_USER_ID PRIMARY KEY (USER_ID),
    CONSTRAINT FK_ADDRESS_USER FOREIGN KEY (USER_ADDRESS) REFERENCES Address(ADDRESS_ID),
    CONSTRAINT FK_ROLE_USER FOREIGN KEY (USER_ROLE) REFERENCES Role(ROLE_ID),
    CONSTRAINT FK_ACCESS_USER FOREIGN KEY (USER_ACCESS) REFERENCES ACCESSTABLE(ACCESS_ID),
    CONSTRAINT FK_ENCODER_USER FOREIGN KEY (USER_ENCODER) REFERENCES USERTABLE(USER_ID)
);

CREATE TABLE VERIFICATION (
    VERIFICATION_ID NUMBER NOT NULL,
    USER_ID NUMBER,
    TOKEN VARCHAR2(40),
    EXPIRY TIMESTAMP,
    CONSTRAINT PK_VERIFICATION_ID PRIMARY KEY (VERIFICATION_ID),
    CONSTRAINT FK_USER_VERIFICATION FOREIGN KEY (USER_ID) REFERENCES USERTABLE(USER_ID)
);

CREATE TABLE FORGOT_PASSWORD (
    FORGOT_PASSWORD_ID NUMBER NOT NULL,
    USER_ID NUMBER,
    TOKEN VARCHAR2(40),
    EXPIRY TIMESTAMP,
    CONSTRAINT PK_FORGOT_PASSWORD_ID PRIMARY KEY (FORGOT_PASSWORD_ID),
    CONSTRAINT FK_USER_FORGOT_PASSWORD FOREIGN KEY (USER_ID) REFERENCES USERTABLE(USER_ID)
);

CREATE TABLE PATIENT (
    PATIENT_ID NUMBER NOT NULL,
    USER_ID NUMBER,
    PATIENT_CREATED_ON TIMESTAMP,
    PATIENT_UPDATED_ON TIMESTAMP,
    CONSTRAINT PK_PATIENT_ID PRIMARY KEY (PATIENT_ID),
    CONSTRAINT FK_USER_PATIENT FOREIGN KEY (USER_ID) REFERENCES USERTABLE(USER_ID)
);

CREATE TABLE DOCTOR (
    DOCTOR_ID NUMBER NOT NULL,
    USER_ID NUMBER NOT NULL,
    DOCTOR_HOSPITAL NUMBER NOT NULL, -- Foreign key to a Hospital table
    DOCTOR_DEPARTMENT NUMBER NOT NULL, -- Foreign key to a Department table
    DOCTOR_SPECIALTY NUMBER NOT NULL, -- Foreign key to a Specialty table
    DOCTOR_E_SIGNATURE BLOB,
    DOCTOR_LICENSE_NUMBER VARCHAR2(8) NOT NULL,
    DOCTOR_LICENSE_EXP_DATE DATE NOT NULL,
    DOCTOR_SCHEDULE NUMBER NOT NULL, -- Foreign key to a Schedule table
    CONSTRAINT PK_DOCTOR_ID PRIMARY KEY (DOCTOR_ID),
    CONSTRAINT FK_USER_DOCTOR FOREIGN KEY (user_ID) REFERENCES USERTABLE(USER_ID),
    CONSTRAINT FK_HOSPITAL_DOCTOR FOREIGN KEY (DOCTOR_HOSPITAL) REFERENCES Hospital(HOSPITAL_ID),
    CONSTRAINT FK_DEPARTMENT_DOCTOR FOREIGN KEY (DOCTOR_DEPARTMENT) REFERENCES Department(DEPARTMENT_ID),
    CONSTRAINT FK_SPECIALTY_DOCTOR FOREIGN KEY (DOCTOR_SPECIALTY) REFERENCES Specialty(SPECIALTY_ID)--,
    --CONSTRAINT fk_schedule_doctor FOREIGN KEY (DOCTOR_SCHEDULE) REFERENCES Schedule(schedule_ID)
);

CREATE TABLE ONBOARD (
    RELATION_ID NUMBER NOT NULL,
    PATIENT_ID NUMBER NOT NULL,
    DOCTOR_ID NUMBER NOT NULL,
    DOCTOR_ROLE VARCHAR2(255),
    CONSTRAINT PK_RELATION_ID PRIMARY KEY (RELATION_ID),
    CONSTRAINT FK_PATIENT_ONBOARD FOREIGN KEY (PATIENT_ID) REFERENCES Patient(PATIENT_ID),
    CONSTRAINT FK_DOCTOR_ONBOARD FOREIGN KEY (DOCTOR_ID) REFERENCES Doctor(DOCTOR_ID)
);

CREATE TABLE BODYSITE (
    BODYSITE_ID NUMBER NOT NULL,
    BODYSITE_NAME VARCHAR2(255),
    CONSTRAINT PK_BODYSITE_ID PRIMARY KEY (BODYSITE_ID)
);

CREATE TABLE BASIS (
    BASIS_ID NUMBER NOT NULL,
    CATEGORY VARCHAR2(255) NOT NULL,
    SUBCATEGORY VARCHAR2(255) NOT NULL,
    CONSTRAINT PK_BASIS_ID PRIMARY KEY (BASIS_ID)
);

CREATE TABLE DISEASESTATUS (
    DXSTATUS_ID NUMBER NOT NULL,
    PATIENT_ID NUMBER, -- Foreign key to PATIENT table
    DXSTATUS_ALIVE CHAR(1) NOT NULL,
    DXSTATUS_SYMPTOMS CHAR(1) NOT NULL,
    DXSTATUS_RECURRENCE CHAR(1) NOT NULL,
    DXSTATUS_METASTATIC CHAR(1) NOT NULL,
    DXSTATUS_CURATIVE CHAR(1) NOT NULL,
    DXSTATUS_CREATED_ON TIMESTAMP,
    CONSTRAINT PK_DXSTATUS_ID PRIMARY KEY (DXSTATUS_ID),
    CONSTRAINT FK_PATIENT_DISEASESTATUS FOREIGN KEY (PATIENT_ID) REFERENCES PATIENT(PATIENT_ID)
);

CREATE TABLE HISTOLOGY (
    HISTOLOGY_ID NUMBER NOT NULL,
    PATIENT_ID NUMBER, -- Foreign key to PATIENT table
    HISTO_PATHOLOGY NUMBER NOT NULL, -- Foreign key to a PATHOLOGY table
    HISTO_TUMOR_SIZE NUMBER NOT NULL,
    HISTO_TUMOR_EXTENSION CHAR(1)  NOT NULL,
    HISTO_GRADE NUMBER NOT NULL,
    HISTO_NODE_POSITIVE NUMBER NOT NULL,
    HISTO_NODE_HARVEST NUMBER NOT NULL,
    HISTO_MARGINS_NEGATIVE CHAR(1) NOT NULL,
    HISTO_POSITIVE_MARGINS VARCHAR2(255) NOT NULL,
    HISTO_STAGE VARCHAR2(50) NOT NULL,
    HISTO_CREATED_ON TIMESTAMP,
    HISTO_UPDATED_ON TIMESTAMP,
    HISTO_ENCODER NUMBER, -- Foreign key to USER table or similar
    CONSTRAINT PK_HISTOLOGY_ID PRIMARY KEY (HISTOLOGY_ID),
    CONSTRAINT FK_PATIENT_HISTOLOGY FOREIGN KEY (PATIENT_ID) REFERENCES PATIENT(PATIENT_ID),
    CONSTRAINT FK_PATHOLOGY_HISTOLOGY FOREIGN KEY (HISTO_PATHOLOGY) REFERENCES PATHOLOGY_DIM(PATHOLOGY_DIM_ID),
    CONSTRAINT FK_ENCODER_HISTOLOGY FOREIGN KEY (HISTO_ENCODER) REFERENCES DOCTOR(DOCTOR_ID)
);

CREATE TABLE METASTATICSITE (
    METS_ID NUMBER NOT NULL,
    PATIENT_ID NUMBER, -- Foreign key to PATIENT table
    METS_DISTANTLN CHAR(1),
    METS_BONE CHAR(1),
    METS_LIVER CHAR(1),
    METS_LUNG CHAR(1),
    METS_BRAIN CHAR(1),
    METS_OVARY CHAR(1),
    METS_SKIN CHAR(1),
    METS_INTESTINE CHAR(1),
    METS_OTHERS CHAR(1),
    METS_UNKNOWN CHAR(1),
    METS_NOTES VARCHAR2(2000),
    METS_CREATED_ON TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    METS_UPDATED_ON TIMESTAMP,
    METS_ENCODER NUMBER, -- Foreign key to PATIENT table
    CONSTRAINT PK_METASTATICSITE_ID PRIMARY KEY (METS_ID),
    CONSTRAINT FK_PATIENT_METS FOREIGN KEY (PATIENT_ID) REFERENCES PATIENT(PATIENT_ID),
    CONSTRAINT FK_ENCODER_METS FOREIGN KEY (METS_ENCODER) REFERENCES DOCTOR(DOCTOR_ID)
);

CREATE TABLE DISEASE (
    DISEASE_ID NUMBER NOT NULL,
    PATIENT_ID NUMBER, -- Foreign key to PATIENT table
    DISEASE_PRIMARY_SITE NUMBER NOT NULL, -- Foreign key to BODYSITE table
    DISEASE_DIAGNOSIS_DATE DATE NOT NULL,
    DISEASE_BASIS NUMBER NOT NULL, -- Foreign key to BASIS table
    DISEASE_LATERALITY VARCHAR2(50) NOT NULL, -- Enum values should be managed by a check constraint or a separate lookup table
    DISEASE_HISTOLOGY NUMBER, -- Foreign key to HISTOLOGY table
    DISEASE_EXTENT VARCHAR2(50) NOT NULL, -- Enum values should be managed by a check constraint or a separate lookup table
    DISEASE_TUMOR_SIZE NUMBER NOT NULL,
    DISEASE_LYMPH_NODE NUMBER NOT NULL,
    DISEASE_METASTATIC CHAR(1) NOT NULL,
    DISEASE_METASTATIC_SITE NUMBER, -- Foreign key to METASTATICSITE table
    DISEASE_MULTIPLE_PRIMARY NUMBER NOT NULL,
    DISEASE_TSTAGE NUMBER NOT NULL,
    DISEASE_NSTAGE NUMBER NOT NULL,
    DISEASE_MSTAGE NUMBER NOT NULL,
    DISEASE_GSTAGE NUMBER,
    DISEASE_STAGE VARCHAR2(50) NOT NULL,
    DISEASE_STAGE_TYPE VARCHAR2(50) NOT NULL, -- Enum values should be managed by a check constraint or a separate lookup table
    DISEASE_STATUS NUMBER NOT NULL, -- Foreign key to DISEASESTATUS table
    DISEASE_CREATED_ON TIMESTAMP,
    DISEASE_UPDATED_ON TIMESTAMP,
    DISEASE_ENCODER NUMBER, -- Foreign key to USER table or similar
    CONSTRAINT PK_DISEASE_ID PRIMARY KEY (DISEASE_ID),
    CONSTRAINT FK_PATIENT_DISEASE FOREIGN KEY (PATIENT_ID) REFERENCES PATIENT(PATIENT_ID),
    CONSTRAINT FK_PRIMARY_SITE_DISEASE FOREIGN KEY (DISEASE_PRIMARY_SITE) REFERENCES BODYSITE(BODYSITE_ID),
    CONSTRAINT FK_BASIS_DISEASE FOREIGN KEY (DISEASE_BASIS) REFERENCES BASIS(BASIS_ID),
    CONSTRAINT FK_HISTOLOGY_DISEASE FOREIGN KEY (DISEASE_HISTOLOGY) REFERENCES HISTOLOGY(HISTOLOGY_ID),
    CONSTRAINT FK_METASTATIC_SITE_DISEASE FOREIGN KEY (DISEASE_METASTATIC_SITE) REFERENCES METASTATICSITE(METS_ID),
    CONSTRAINT FK_STATUS_DISEASE FOREIGN KEY (DISEASE_STATUS) REFERENCES DISEASESTATUS(DXSTATUS_ID),
    CONSTRAINT FK_ENCODER_DISEASE FOREIGN KEY (DISEASE_ENCODER) REFERENCES DOCTOR(DOCTOR_ID)
);

CREATE TABLE DISEASEOTHERSITE (
    DISEASEOTHERSITE_ID NUMBER NOT NULL,
    DISEASE_ID NUMBER NOT NULL,
    BODYSITE_ID NUMBER NOT NULL,
    CONSTRAINT PK_DISEASEOTHERSITE_ID PRIMARY KEY (DISEASEOTHERSITE_ID),
    CONSTRAINT FK_DISEASE_OTHERSITE FOREIGN KEY (DISEASE_ID) REFERENCES DISEASE(DISEASE_ID),
    CONSTRAINT FK_BODYSITE_OTHERSITE FOREIGN KEY (BODYSITE_ID) REFERENCES BODYSITE(BODYSITE_ID)
);

CREATE TABLE RXTYPE (
    RXTYPE_ID NUMBER NOT NULL,
    PATIENT_ID NUMBER, -- Foreign key to PATIENT table
    RXTYPE_SURGERY CHAR(1),
    RXTYPE_CHEMOTHERAPY CHAR(1),
    RXTYPE_RADIOTHERAPY CHAR(1),
    RXTYPE_IMMUNOTHERAPY CHAR(1),
    RXTYPE_HORMONALTHERAPY CHAR(1),
    RXTYPE_OTHERS CHAR(1),
    RXTYPE_NOTES VARCHAR2(255),
    RXTYPE_ENCODER NUMBER, -- Foreign key to USER table
    RXTYPE_CREATEDON TIMESTAMP, -- System time now
    RXTYPE_UPDATEDON TIMESTAMP,
    CONSTRAINT PK_RXTYPE_ID PRIMARY KEY (RXTYPE_ID),
    CONSTRAINT FK_PATIENT_RXTYPE FOREIGN KEY (PATIENT_ID) REFERENCES PATIENT(PATIENT_ID),
    CONSTRAINT FK_ENCODER_RXTYPE FOREIGN KEY (RXTYPE_ENCODER) REFERENCES USERTABLE(USER_ID)
);

CREATE TABLE SURGERY (
    SURGERY_ID NUMBER NOT NULL,
    PATIENT_ID NUMBER, -- Foreign key to PATIENT table
    SURGERY_OPERATION VARCHAR2(255) NOT NULL,
    SURGERY_DATE DATE NOT NULL,
    SURGERY_FINDINGS VARCHAR2(255) NOT NULL,
    SURGERY_INTENT VARCHAR2(255), -- Choices: Curative-complete, Curative-incomplete, Palliative only, Others
    SURGERY_SURGEON NUMBER NOT NULL, -- Foreign key to DOCTOR table
    SURGERY_HOSPITAL NUMBER NOT NULL, -- Foreign key to HOSPITAL table
    SURGERY_ENCODER NUMBER, -- Foreign key to USER table
    SURGERY_CREATEDON TIMESTAMP , -- System time
    SURGERY_UPDATEDON TIMESTAMP,
    CONSTRAINT PK_SURGERY_ID PRIMARY KEY (SURGERY_ID),
    CONSTRAINT FK_PATIENT_SURGERY FOREIGN KEY (PATIENT_ID) REFERENCES PATIENT(PATIENT_ID),
    CONSTRAINT FK_SURGEON_SURGERY FOREIGN KEY (SURGERY_SURGEON) REFERENCES DOCTOR(DOCTOR_ID),
    CONSTRAINT FK_HOSPITAL_SURGERY FOREIGN KEY (SURGERY_HOSPITAL) REFERENCES HOSPITAL(HOSPITAL_ID),
    CONSTRAINT FK_ENCODER_SURGERY FOREIGN KEY (SURGERY_ENCODER) REFERENCES USERTABLE(USER_ID)
);

CREATE TABLE CHEMOPROTOCOL (
    CHEMOPROTOCOL_ID NUMBER NOT NULL,
    CHEMODRUGS VARCHAR2(255) NOT NULL,
    CHEMODOSAGE NUMBER NOT NULL,
    CHEMONOCYCLE NUMBER NOT NULL,
    CHEMODILUENT VARCHAR2(255) NOT NULL,
    CONSTRAINT PK_CHEMOPROTOCOL_ID PRIMARY KEY (CHEMOPROTOCOL_ID)
);

CREATE TABLE TREATMENT (
    TREATMENT_ID NUMBER NOT NULL,
    PATIENT_ID NUMBER, -- Foreign key to PATIENT table
    TREATMENT_PRIMARYRXTYPE VARCHAR2(255) NOT NULL, -- Field options: RxType field names
    TREATMENT_PRIMARYRXNAME VARCHAR2(255) NOT NULL,
    TREATMENT_INITIALRXDATE DATE NOT NULL,
    TREATMENT_PURPOSE VARCHAR2(255) NOT NULL, -- Field options: Curative-complete, Curative-incomplete, Palliative only, Others
    TREATMENT_PLAN NUMBER NOT NULL, -- Foreign key to RXTYPE
    TREATMENT_ENCODER NUMBER, -- Foreign key to USER table (logged-in user)
    TREATMENT_CREATEDON TIMESTAMP, -- System time now
    TREATMENT_UPDATEDON TIMESTAMP,
    CONSTRAINT PK_TREATMENT_ID PRIMARY KEY (TREATMENT_ID),
    CONSTRAINT FK_PATIENT_TREATMENT FOREIGN KEY (PATIENT_ID) REFERENCES PATIENT(PATIENT_ID),
    CONSTRAINT FK_PLAN_TREATMENT FOREIGN KEY (TREATMENT_PLAN) REFERENCES RXTYPE(RXTYPE_ID),
    CONSTRAINT FK_ENCODER_TREATMENT FOREIGN KEY (TREATMENT_ENCODER) REFERENCES USERTABLE(USER_ID)
);

CREATE TABLE CHEMOTHERAPY (
    CHEMO_ID NUMBER NOT NULL,
    PATIENT_ID NUMBER, -- Foreign key to PATIENT table
    CHEMO_TYPE VARCHAR2(255) NOT NULL, -- Choices: neoadjuvant, adjuvant, palliative
    CHEMO_PROTOCOL NUMBER NOT NULL, -- Foreign key to CHEMOPROTOCOL table
    CHEMO_INITIALDATE DATE NOT NULL,
    CHEMO_ENDDATE DATE,
    CHEMO_CYCLENUMBERGIVEN NUMBER,
    CHEMO_STATUS VARCHAR2(255) NOT NULL, -- Choices: ongoing, completed, not completed
    CHEMO_NOTES VARCHAR2(255),
    CHEMO_ISCOMPLETED CHAR(1),
    CHEMO_FACILITY NUMBER NOT NULL, -- Foreign key to HOSPITAL table
    CHEMO_DOCTOR NUMBER NOT NULL, -- Foreign key to DOCTOR table
    CHEMO_ENCODER NUMBER, -- Foreign key to USER table
    CHEMO_CREATEDON TIMESTAMP, -- System time
    CHEMO_UPDATEDON TIMESTAMP,
    CONSTRAINT PK_CHEMOTHERAPY_ID PRIMARY KEY (CHEMO_ID),
    CONSTRAINT FK_PATIENT_CHEMO FOREIGN KEY (PATIENT_ID) REFERENCES PATIENT(PATIENT_ID),
    CONSTRAINT FK_PROTOCOL_CHEMO FOREIGN KEY (CHEMO_PROTOCOL) REFERENCES CHEMOPROTOCOL(CHEMOPROTOCOL_ID),
    CONSTRAINT FK_FACILITY_CHEMO FOREIGN KEY (CHEMO_FACILITY) REFERENCES HOSPITAL(HOSPITAL_ID),
    CONSTRAINT FK_DOCTOR_CHEMO FOREIGN KEY (CHEMO_DOCTOR) REFERENCES DOCTOR(DOCTOR_ID),
    CONSTRAINT FK_ENCODER_CHEMO FOREIGN KEY (CHEMO_ENCODER) REFERENCES USERTABLE(USER_ID)
);



CREATE TABLE IMMUNOTHERAPY (
    IMMUNORX_ID NUMBER NOT NULL,
    PATIENT_ID NUMBER, -- Foreign key to PATIENT table
    IMMUNORX_DRUG VARCHAR2(255) NOT NULL,
    IMMUNORX_INITIALDATE DATE NOT NULL,
    IMMUNORX_ENDDATE DATE,
    IMMUNORX_STATUS VARCHAR2(255) NOT NULL, -- Choices: ongoing, completed, not completed
    IMMUNORX_NOTES VARCHAR2(255),
    IMMUNORX_ISCOMPLETED CHAR(1),
    IMMUNORX_FACILITY NUMBER NOT NULL, -- Foreign key to HOSPITAL table
    IMMUNORX_DOCTOR NUMBER NOT NULL, -- Foreign key to DOCTOR table
    IMMUNORX_ENCODER NUMBER, -- Foreign key to USER table
    IMMUNORX_CREATEDON TIMESTAMP, -- System time
    IMMUNORX_UPDATEDON TIMESTAMP,
    CONSTRAINT PK_IMMUNOTHERAPY_ID PRIMARY KEY (IMMUNORX_ID),
    CONSTRAINT FK_PATIENT_IMMUNO FOREIGN KEY (PATIENT_ID) REFERENCES PATIENT(PATIENT_ID),
    CONSTRAINT FK_FACILITY_IMMUNO FOREIGN KEY (IMMUNORX_FACILITY) REFERENCES HOSPITAL(HOSPITAL_ID),
    CONSTRAINT FK_DOCTOR_IMMUNO FOREIGN KEY (IMMUNORX_DOCTOR) REFERENCES DOCTOR(DOCTOR_ID),
    CONSTRAINT FK_ENCODER_IMMUNO FOREIGN KEY (IMMUNORX_ENCODER) REFERENCES USERTABLE(USER_ID)
);

CREATE TABLE HORMONAL (
    HORMONAL_ID NUMBER NOT NULL,
    PATIENT_ID NUMBER, -- Foreign key to PATIENT table
    HORMONAL_DRUG VARCHAR2(255) NOT NULL,
    HORMONAL_DOSE NUMBER NOT NULL,
    HORMONAL_INITIALDATE DATE NOT NULL,
    HORMONAL_ENDDATE DATE,
    HORMONAL_STATUS VARCHAR2(255) NOT NULL, -- Choices: ongoing, completed, not completed
    HORMONAL_RX_NOTES VARCHAR2(255),
    HORMONAL_DOCTOR NUMBER NOT NULL, -- Foreign key to DOCTOR table
    HORMONAL_ENCODER NUMBER, -- Foreign key to USER table
    HORMONAL_CREATEDON TIMESTAMP , -- System time
    HORMONAL_UPDATEDON TIMESTAMP,
    CONSTRAINT PK_HORMONAL_ID PRIMARY KEY (HORMONAL_ID),
    CONSTRAINT FK_PATIENT_HORMONAL FOREIGN KEY (PATIENT_ID) REFERENCES PATIENT(PATIENT_ID),
    CONSTRAINT FK_DOCTOR_HORMONAL FOREIGN KEY (HORMONAL_DOCTOR) REFERENCES DOCTOR(DOCTOR_ID),
    CONSTRAINT FK_ENCODER_HORMONAL FOREIGN KEY (HORMONAL_ENCODER) REFERENCES USERTABLE(USER_ID)
);

CREATE TABLE RAD_DETAILS (
    RADDETAILS_ID NUMBER NOT NULL,
    RADDETAILS_PROCEDURE VARCHAR2(255) NOT NULL,
    CONSTRAINT PK_RADDETAILS_ID PRIMARY KEY (RADDETAILS_ID)
);

CREATE TABLE RADIOTHERAPY (
    RADRX_ID NUMBER NOT NULL,
    PATIENT_ID NUMBER NOT NULL,
    RADRX_TYPE NUMBER NOT NULL, -- Foreign key to RAD_DETAILS table
    RADRX_INITIALDATE DATE NOT NULL,
    RADRX_LASTDATE DATE,
    RADRX_DOSE NUMBER NOT NULL,
    RADRX_BODYSITE VARCHAR2(255) NOT NULL,
    RADRX_STATUS VARCHAR2(255) NOT NULL, -- Choices: ongoing, completed, not completed
    RADRX_ISCOMPLETED CHAR(1) CHECK (RADRX_ISCOMPLETED IN ('Y', 'N')) NOT NULL,
    RADRX_FACILITY NUMBER, -- Foreign key to HOSPITAL table
    RADRX_DOCTOR NUMBER NOT NULL, -- Foreign key to DOCTOR table
    RADRX_ENCODER NUMBER, -- Foreign key to USER table
    RADRX_CREATEDON TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- System time
    RADRX_UPDATEDON TIMESTAMP,
    CONSTRAINT PK_RADIOTHERAPY_ID PRIMARY KEY (RADRX_ID, PATIENT_ID),
    CONSTRAINT FK_PATIENT_RADRX FOREIGN KEY (PATIENT_ID) REFERENCES PATIENT(PATIENT_ID),
    CONSTRAINT FK_TYPE_RADRX FOREIGN KEY (RADRX_TYPE) REFERENCES RAD_DETAILS(RADDETAILS_ID),
    CONSTRAINT FK_FACILITY_RADRX FOREIGN KEY (RADRX_FACILITY) REFERENCES HOSPITAL(HOSPITAL_ID),
    CONSTRAINT FK_DOCTOR_RADRX FOREIGN KEY (RADRX_DOCTOR) REFERENCES DOCTOR(DOCTOR_ID),
    CONSTRAINT FK_ENCODER_RADRX FOREIGN KEY (RADRX_ENCODER) REFERENCES USERTABLE(USER_ID)
);


CREATE TABLE CONSULT (
    CONSULT_ID NUMBER NOT NULL,
    PATIENT_ID NUMBER, -- Foreign key to PATIENT table
    CONSULT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- System time
    CONSULT_SUBJECTIVE VARCHAR2(255) NOT NULL,
    CONSULT_OBJECTIVE VARCHAR2(255) NOT NULL,
    CONSULT_SURVWORKUP VARCHAR2(255) NOT NULL,
    CONSULT_RXPLAN VARCHAR2(255) NOT NULL,
    CONSULT_ASSESSMENT VARCHAR2(255) NOT NULL,
    CONSULT_PATIENTSTATUS NUMBER NOT NULL, -- Foreign key to DISEASE_STATUS table
    CONSTRAINT PK_CONSULT_ID PRIMARY KEY (CONSULT_ID),
    CONSTRAINT FK_PATIENT_CONSULT FOREIGN KEY (PATIENT_ID) REFERENCES PATIENT(PATIENT_ID),
    CONSTRAINT FK_STATUS_CONSULT FOREIGN KEY (CONSULT_PATIENTSTATUS) REFERENCES DISEASESTATUS(DXSTATUS_ID)
);

CREATE SEQUENCE ADDRESS_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

CREATE SEQUENCE ACCESS_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

CREATE SEQUENCE ROLE_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

CREATE SEQUENCE HOSPITAL_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

CREATE SEQUENCE DEPARTMENT_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

CREATE SEQUENCE SPECIALTY_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

CREATE SEQUENCE USER_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

CREATE SEQUENCE VERIFICATION_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

CREATE SEQUENCE FORGOT_PASSWORD_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

CREATE SEQUENCE PATIENT_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

CREATE SEQUENCE DOCTOR_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

CREATE SEQUENCE ONBOARD_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

CREATE SEQUENCE BASIS_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

CREATE SEQUENCE BODYSITE_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

CREATE SEQUENCE DISEASESTATUS_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

CREATE SEQUENCE HISTOLOGY_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

CREATE SEQUENCE METASTATICSITE_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

CREATE SEQUENCE DISEASE_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

CREATE SEQUENCE DISEASEOTHERSITE_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

-- Sequence for TREATMENT table
CREATE SEQUENCE TREATMENT_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

-- Sequence for RXTYPE table
CREATE SEQUENCE RXTYPE_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

-- Sequence for SURGERY table
CREATE SEQUENCE SURGERY_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

-- Sequence for CHEMOTHERAPY table
CREATE SEQUENCE CHEMOTHERAPY_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

-- Sequence for CHEMOPROTOCOL table
CREATE SEQUENCE CHEMOPROTOCOL_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

-- Sequence for IMMUNOTHERAPY table
CREATE SEQUENCE IMMUNOTHERAPY_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

-- Sequence for HORMONAL table
CREATE SEQUENCE HORMONAL_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

-- Sequence for RADIOTHERAPY table
CREATE SEQUENCE RADIOTHERAPY_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

-- Sequence for RAD_DETAILS table
CREATE SEQUENCE RAD_DETAILS_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

-- Sequence for CONSULT table
CREATE SEQUENCE CONSULT_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;


-- NOTIFICATIONTYPE Table
CREATE TABLE NOTIFICATIONTYPE (
    NOTIFTYPE_ID NUMBER PRIMARY KEY,
    NOTIFICATIONTYPE_NAME VARCHAR2(200) NOT NULL
);
-- NOTIFICATIONSTATUS Table
CREATE TABLE NOTIFICATIONSTATUS (
    NOTIFSTATUS_ID NUMBER PRIMARY KEY,
    NOTIFSTATUS_NAME VARCHAR2(200) NOT NULL
);

CREATE TABLE NOTIFICATIONLOG (
     NOTIFLOG_ID NUMBER PRIMARY KEY,
     NOTIFICATION_DATE DATE,
     NOTIFICATION_TYPE NUMBER,
     NOTIFICATION_STATUS NUMBER,
     NOTIFICATION_RECEIVER NUMBER,
     NOTIFICATION_SENDER NUMBER,
     NOTIFICATION_NOTES VARCHAR2(2000),
     NOTIFICATION_UPDATEDON TIMESTAMP,
     FOREIGN KEY (NOTIFICATION_TYPE) REFERENCES NOTIFICATIONTYPE(NOTIFTYPE_ID),
     FOREIGN KEY (NOTIFICATION_STATUS) REFERENCES NOTIFICATIONSTATUS(NOTIFSTATUS_ID),
     FOREIGN KEY (NOTIFICATION_RECEIVER) REFERENCES USERTABLE(USER_ID),
     FOREIGN KEY (NOTIFICATION_SENDER) REFERENCES USERTABLE(USER_ID)
);

-- SYMPTOMCATEGORY Table
CREATE TABLE SYMPTOMCATEGORY (
    SYMPTOMCATEGORY_ID NUMBER PRIMARY KEY,
    SYMPTOM_CATEGORY VARCHAR2(200) NOT NULL
);

CREATE TABLE SYMPTOMSURVEY (
    SYMPTOMSURVEY_ID NUMBER PRIMARY KEY,
    CANCER_TYPE NUMBER,
    SYMPTOM_NAME VARCHAR2(200) NOT NULL,
    SYMPTOM_MEDICALTERM VARCHAR2(200),
    SYMPTOM_CATEGORY NUMBER,
    SYMPTOM_FILIPINO VARCHAR2(100),
    SYMPTOM_ALERTABLE CHAR(1),
    FOREIGN KEY (CANCER_TYPE) REFERENCES BODYSITE(BODYSITE_ID),
    FOREIGN KEY (SYMPTOM_CATEGORY) REFERENCES SYMPTOMCATEGORY(SYMPTOMCATEGORY_ID)
);


-- SURVEYRESPONSE Table
CREATE TABLE SURVEYRESPONSE (
    SURVEYRESPONSE_ID NUMBER PRIMARY KEY,
    PATIENT_ID NUMBER,
    DOCTOR_ID NUMBER,
    SURVEYRESPONSE_DATE TIMESTAMP,
    SYMPTOMSURVEY_ID NUMBER,
    RESPONSE_NOTE VARCHAR2(254),
    FOREIGN KEY (PATIENT_ID) REFERENCES PATIENT(PATIENT_ID),
    FOREIGN KEY (DOCTOR_ID) REFERENCES DOCTOR(DOCTOR_ID),
    FOREIGN KEY (SYMPTOMSURVEY_ID) REFERENCES SYMPTOMSURVEY(SYMPTOMSURVEY_ID)
);

-- WORKUP Table
CREATE TABLE WORKUP (
    WORKUP_ID NUMBER PRIMARY KEY,
    WORKUP_NAME VARCHAR2(200) NOT NULL
);

-- LABMONITOR Table
CREATE TABLE LABMONITOR (
    LABMONITOR_ID NUMBER PRIMARY KEY,
    CANCER_TYPE NUMBER,
    WORKUP_NAME NUMBER,
    WORKUP_FREQUENCY NUMBER,
    WORKUP_TYPE VARCHAR2(1000),
    WORKUP_INDICATION VARCHAR2(1000),
    WORKUP_DURATION NUMBER,
    WORKUP_REFERRAL VARCHAR2(1000),
    FOREIGN KEY (CANCER_TYPE) REFERENCES BODYSITE(BODYSITE_ID),
    FOREIGN KEY (WORKUP_NAME) REFERENCES WORKUP(WORKUP_ID)
);
--worktype fk


-- LABSDOWNLOAD Table
CREATE TABLE LABSDOWNLOAD (
    LABREQ_ID NUMBER PRIMARY KEY,
    LABREQ_DATE TIMESTAMP,
    PATIENT_ID NUMBER,
    WORKUP_NAME NUMBER,
    FOREIGN KEY (PATIENT_ID) REFERENCES PATIENT(PATIENT_ID),
    FOREIGN KEY (WORKUP_NAME) REFERENCES WORKUP(WORKUP_ID)
);

-- LABSUBMITTED Table
CREATE TABLE LABSUBMITTED (
    LABSUBMITTED_ID NUMBER PRIMARY KEY,
    PATIENT_ID NUMBER,
    DOCTOR_ID NUMBER,
    LABSUBMISSION_DATE TIMESTAMP,
    WORKUP_NAME NUMBER,
    LABFILELOCATION VARCHAR2(1000) NOT NULL,
    LABSUBMISSION_NOTES VARCHAR2(2000),
    FOREIGN KEY (PATIENT_ID) REFERENCES PATIENT(PATIENT_ID),
    FOREIGN KEY (DOCTOR_ID) REFERENCES DOCTOR(DOCTOR_ID),
    FOREIGN KEY (WORKUP_NAME) REFERENCES WORKUP(WORKUP_ID)
);

-- CHECKUPSTATUS Table
CREATE TABLE CHECKUPSTATUS (
    CHECKUPSTATUS_ID NUMBER PRIMARY KEY,
    NOTIFSTATUS_NAME VARCHAR2(100) NOT NULL
);

-- CHECKUPSCHEDULE Table
CREATE TABLE CHECKUPSCHEDULE (
    CHECKUPSCHED_ID NUMBER PRIMARY KEY,
    PATIENT_ID NUMBER,
    DOCTOR_ID NUMBER,
    CHECKUPREQUEST_DATE DATE,
    CHECKUPCONFIRMED_DATE DATE,
    CHECKUP_STARTTIME TIMESTAMP,
    CHECKUP_ENDTIME TIMESTAMP,
    CHECKUP_STATUS NUMBER,
    CHECKUP_UPDATEDON TIMESTAMP,
    FOREIGN KEY (PATIENT_ID) REFERENCES PATIENT(PATIENT_ID),
    FOREIGN KEY (DOCTOR_ID) REFERENCES DOCTOR(DOCTOR_ID),
    FOREIGN KEY (CHECKUP_STATUS) REFERENCES CHECKUPSTATUS(CHECKUPSTATUS_ID)
);




-- CHECKUP Table
CREATE TABLE CHECKUP (
    CHECKUP_ID NUMBER PRIMARY KEY,
    PATIENT_ID NUMBER,
    DOCTOR_ID NUMBER,
    CHECKUP_DATE TIMESTAMP,
    CHECKUP_SUBJECTIVE VARCHAR2(1000) NOT NULL,
    CHECKUP_OBJECTIVE VARCHAR2(1000) NOT NULL,
    CHECKUP_ASSESSMENT VARCHAR2(1000) NOT NULL,
    CHECKUP_PLAN VARCHAR2(1000) NOT NULL,
    CHECKUP_SURVWORKUP VARCHAR2(1000) NOT NULL,
    CHECKUP_PATIENTSTATUS NUMBER,
    CHECKUP_SCHEDULE NUMBER,
    FOREIGN KEY (PATIENT_ID) REFERENCES PATIENT(PATIENT_ID),
    FOREIGN KEY (DOCTOR_ID) REFERENCES DOCTOR(DOCTOR_ID),
    FOREIGN KEY (CHECKUP_PATIENTSTATUS) REFERENCES DISEASESTATUS(DXSTATUS_ID),
    FOREIGN KEY (CHECKUP_SCHEDULE) REFERENCES CHECKUPSCHEDULE(CHECKUPSCHED_ID)
);


-- Sequence for NOTIFICATIONLOG Table
CREATE SEQUENCE NOTIFICATIONLOG_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

-- Sequence for NOTIFICATIONTYPE Table
CREATE SEQUENCE NOTIFICATIONTYPE_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

-- Sequence for NOTIFICATIONSTATUS Table
CREATE SEQUENCE NOTIFICATIONSTATUS_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

-- Sequence for SYMPTOMSURVEY Table
CREATE SEQUENCE SYMPTOMSURVEY_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

-- Sequence for SYMPTOMCATEGORY Table
CREATE SEQUENCE SYMPTOMCATEGORY_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

-- Sequence for SURVEYRESPONSE Table
CREATE SEQUENCE SURVEYRESPONSE_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

-- Sequence for LABMONITOR Table
CREATE SEQUENCE LABMONITOR_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

-- Sequence for WORKUP Table
CREATE SEQUENCE WORKUP_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

-- Sequence for LABSDOWNLOAD Table
CREATE SEQUENCE LABSDOWNLOAD_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

-- Sequence for LABSUBMITTED Table
CREATE SEQUENCE LABSUBMITTED_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

-- Sequence for CHECKUP Table
CREATE SEQUENCE CHECKUP_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

-- Sequence for CHECKUPSCHEDULE Table
CREATE SEQUENCE CHECKUPSCHEDULE_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;

-- Sequence for CHECKUPSTATUS Table
CREATE SEQUENCE CHECKUPSTATUS_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1;